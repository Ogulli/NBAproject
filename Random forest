library(readr)
library(randomForest)
library(caret) 
library(ggplot2)
library(dplyr)


final_data <-  read_csv("NBA_final_data_salaries_2023_2024.csv")
View(final_data)

colSums(is.na(final_data)) # checking missing values

#Selecting features and renaming 3P

final_data <- final_data %>%
  select(Player, PTS, Age, MP, `3P`, STL, TRB, salary, AST) %>%
  rename(Three_P = `3P`) 

---------------------------------------------------------------------------------------------------------

# Creating the random forest model

set.seed(123) # Set a seed for reproducibility

trainIndex <- createDataPartition(final_data$salary, p = 0.8, list = FALSE) # 80% for training
trainData <- final_data[trainIndex, ]
testData <- final_data[-trainIndex, ]




rf_model <- randomForest(salary ~ . - Player, data = trainData,
                         ntree = 1000, mtry = 5, 
                         importance = TRUE)



# View model summary
print(rf_model)
--------------------------------------------------------------------------------------------------------------------------

# Visulizing variable importance for salary (Mean Decrease in MSE)

predicted_salaries <- predict(rf_model, testData)

mse <- mean((predicted_salaries - testData$salary)^2) # Calculate and display Mean Squared Error (MSE)
cat("Mean Squared Error (MSE):", mse, "\n")


  
# Visulize variable importance for predicting salry

# Extract variable importance from the model and convert to a data frame

importance_data <- as.data.frame(importance(rf_model))
importance_data$Variable <- rownames(importance_data)

# Select and arrange by Mean Decrease in MSE (IncMSE) for regression
importance_data <- importance_data %>%
  select(Variable, IncMSE = `%IncMSE`) %>%
  arrange(desc(IncMSE))

# Plot variable importance using ggplot2
ggplot(importance_data, aes(x = reorder(Variable, IncMSE), y = IncMSE)) +
  geom_bar(stat = "identity", fill = "orange") +
  coord_flip() +
  labs(title = "Variable Importance for Salary Predictions",
       x = "Variables",
       y = "Mean Decrease in MSE") +
  theme_minimal() +
  theme(axis.text.y = element_text(size = 10),
        plot.title = element_text(hjust = 0.5))  



# Feature importance graph

 Plot variable importance using varImpPlot
varImpPlot(rf_model, main = "Variable Importance in Predicting Salary") #Simple and easy


# Extract and sort feature importance by #IncNodePurity#

feature_importance <- rf_model$importance[, "IncNodePurity"]
sorted_importance <- feature_importance[order(-feature_importance)]

# Create a bar plot
barplot(sorted_importance,
        names.arg = names(sorted_importance),
        las = 3, col = "steelblue",
        main = "Feature Importance (IncNodePurity)",
        ylab = "Increase in Node Purity")

---------------------------------------------------------------------------------------------------------------------------

--------------------------# Visulizing prediction vs. Actual salary-----------------------------------------------------

install.packages("scales")
library(scales)


# Extract actual salaries from the test dataset
actual_salaries <- testData$salary


# Plot actual vs. predicted salary
plot(actual_salaries, predicted_salaries,
     main = "Random Forest - Predicted vs. Actual Salary",
     xlab = "Actual Salary",
     ylab = "Predicted Salary",
     pch = 10, col = "black")
     

# Add a 45-degree reference line
abline(0, 1,  col = "red", lwd = 2)


----------------------------------------Calculating overpaid and underpaid players-------------------------------------------------

# Calculate the difference (Residual) between actual and predicted salary
testData$PredictedSalary <- predicted_salaries
testData$SalaryDifference <- actual_salaries - predicted_salaries

# Sort players by SalaryDifference
# For underpaid players: Negative SalaryDifference indicates underpayment
underpaid_players <- testData %>%
  arrange(SalaryDifference) %>% # Sort in ascending order to get most underpaid (largest negative)
  select(Player, salary, PredictedSalary, SalaryDifference) %>%
  head(10) # Top 10 most underpaid players

# For overpaid players: Positive SalaryDifference indicates overpayment
overpaid_players <- testData %>%
  arrange(desc(SalaryDifference)) %>% # Sort in descending order to get most overpaid (largest positive)
  select(Player, salary, PredictedSalary, SalaryDifference) %>%
  head(10) # Top 10 most overpaid players


# Load formattable package
install.packages("formattable")
library(formattable)

# Define a color format for Salary Difference
color_format <- formatter("span",
                          style = x ~ style(color = ifelse(x < 0, "red", "green")))

# Display underpaid players table
print("Top 10 Most Underpaid Players:")
formattable(underpaid_players, list(
  SalaryDifference = color_format
))

# Display overpaid players table
print("Top 10 Most Overpaid Players:")
formattable(overpaid_players, list(
  SalaryDifference = color_format
))









